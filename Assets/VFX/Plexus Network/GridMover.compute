#pragma kernel Main
#include "ClassicNoise3D.cginc"

RWStructuredBuffer<float3> _PreOffset;
RWStructuredBuffer<float3> _Positions;
int3 _Dimensions;
float _Time;
float _Speed;
float _MaxOffset;

float3 random(int index) 
{
	return frac(sin(index * float3(54998.1518, 21114.1262, 55223.9101))) * 8.8436;
}

[numthreads(4,4,1)]
void Main(uint3 id : SV_DispatchThreadID)
{
	// Create perlin noise to affect particle positions
	float index = id.x * _Dimensions.z * _Dimensions.y + id.y * _Dimensions.z + id.z;
	float3 seed = random(index);
	float time = _Time * _Speed;
	float3 offset = float3(cnoise(seed + time), cnoise(seed + 5.7265 + time), cnoise(seed + 4.325 + time));

	_PreOffset[index] = (float3)id - (float3)_Dimensions / 2;
	float3 preOffset = _PreOffset[index];
	_Positions[index] = preOffset + offset * _MaxOffset;
}
